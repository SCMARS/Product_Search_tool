#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Chrome —Å VPN
"""

import asyncio
import os
import sys
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
sys.path.append('backend')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def test_chrome_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Chrome –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç IP"""
    
    try:
        from playwright.async_api import async_playwright
        
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Chrome —Å VPN...")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        use_installed_chrome = os.getenv('USE_INSTALLED_CHROME', 'true').lower() == 'true'
        connect_to_existing = os.getenv('CONNECT_TO_EXISTING_CHROME', 'false').lower() == 'true'
        chrome_path = os.getenv('CHROME_EXECUTABLE_PATH', '')
        debug_port = os.getenv('CHROME_DEBUG_PORT', '9222')
        
        print(f"üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print(f"   USE_INSTALLED_CHROME: {use_installed_chrome}")
        print(f"   CONNECT_TO_EXISTING_CHROME: {connect_to_existing}")
        print(f"   CHROME_EXECUTABLE_PATH: {chrome_path or '–∞–≤—Ç–æ–ø–æ–∏—Å–∫'}")
        print(f"   CHROME_DEBUG_PORT: {debug_port}")
        print()
        
        async with async_playwright() as p:
            browser = None
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É Chrome
            if connect_to_existing:
                try:
                    print(f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º—É Chrome –Ω–∞ –ø–æ—Ä—Ç—É {debug_port}...")
                    browser = await p.chromium.connect_over_cdp(f"http://localhost:{debug_port}")
                    print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º—É Chrome!")
                except Exception as e:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {e}")
                    print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Chrome –∑–∞–ø—É—â–µ–Ω —Å --remote-debugging-port=9222")
                    return False
            
            # –ò–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π Chrome
            elif use_installed_chrome:
                # –ê–≤—Ç–æ–ø–æ–∏—Å–∫ Chrome –µ—Å–ª–∏ –ø—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω
                if not chrome_path:
                    chrome_paths = [
                        '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome',  # macOS
                        '/usr/bin/google-chrome',  # Linux
                        '/usr/bin/google-chrome-stable',  # Linux
                        'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',  # Windows
                        'C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe'  # Windows 32-bit
                    ]
                    
                    for path in chrome_paths:
                        if os.path.exists(path):
                            chrome_path = path
                            break
                
                if chrome_path and os.path.exists(chrome_path):
                    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Chrome: {chrome_path}")
                    browser = await p.chromium.launch(
                        headless=False,
                        executable_path=chrome_path,
                        args=['--disable-blink-features=AutomationControlled']
                    )
                    print("‚úÖ Chrome –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                else:
                    print("‚ùå Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
            else:
                print("üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π Chromium...")
                browser = await p.chromium.launch(headless=False)
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º IP
            if browser:
                print("\nüåç –ü—Ä–æ–≤–µ—Ä—è–µ–º IP –∞–¥—Ä–µ—Å...")
                context = await browser.new_context()
                page = await context.new_page()
                
                try:
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–∞–π—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IP
                    await page.goto('https://httpbin.org/ip', timeout=10000)
                    await page.wait_for_load_state('networkidle')
                    
                    # –ü–æ–ª—É—á–∞–µ–º IP
                    ip_text = await page.text_content('body')
                    print(f"üìç –í–∞—à IP: {ip_text}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Allegro
                    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Allegro.pl...")
                    await page.goto('https://allegro.pl', timeout=15000)
                    await page.wait_for_load_state('domcontentloaded')
                    
                    title = await page.title()
                    print(f"‚úÖ Allegro.pl –¥–æ—Å—Ç—É–ø–µ–Ω! –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
                    page_content = await page.content()
                    if 'blocked' in page_content.lower() or 'access denied' in page_content.lower():
                        print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç—É–ø–∞")
                    else:
                        print("‚úÖ –î–æ—Å—Ç—É–ø –∫ Allegro.pl —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
                
                finally:
                    await browser.close()
                    
                return True
            
    except ImportError:
        print("‚ùå Playwright –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install playwright")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Chrome —Å VPN")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    if not os.path.exists('.env'):
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./setup_chrome_vpn.sh")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    try:
        result = asyncio.run(test_chrome_connection())
        if result:
            print("\nüéâ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
            print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: ./run.sh")
        else:
            print("\n‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ")
    except KeyboardInterrupt:
        print("\nüõë –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")

if __name__ == "__main__":
    main()
