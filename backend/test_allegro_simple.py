#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –Ω–æ–≤–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ Allegro –±–µ–∑ –ø—Ä–æ–∫—Å–∏
"""

import asyncio
import logging
import os
from allegro_enhanced import AllegroEnhancedScraper

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def test_simple_search():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –±–µ–∑ –ø—Ä–æ–∫—Å–∏"""
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∞–ø–µ—Ä
    scraper = AllegroEnhancedScraper()
    
    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
    scraper.proxy_list = []
    
    test_query = "iphone 15"
    
    logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫: '{test_query}'")
    logger.info("üåê –ü—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∞")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
        results = await scraper.search_products(test_query, max_pages=1, max_retries=1)
        
        if results:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ç–æ–≤–∞—Ä–æ–≤:")
            for i, product in enumerate(results[:3], 1):
                logger.info(f"\n{i}. {product['name']}")
                logger.info(f"   üí∞ {product['price']}")
                logger.info(f"   üè™ {product['seller']}")
                logger.info(f"   üìä –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {product['relevance_score']:.1f}")
                logger.info(f"   üîó {product['url']}")
        else:
            logger.warning("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # –ü—Ä–æ–±—É–µ–º fallback
            logger.info("üîÑ –ü—Ä–æ–±—É–µ–º fallback –º–µ—Ç–æ–¥...")
            fallback_results = scraper._fallback_simple_search(test_query)
            
            if fallback_results:
                logger.info(f"‚úÖ Fallback: –Ω–∞–π–¥–µ–Ω–æ {len(fallback_results)} —Ç–æ–≤–∞—Ä–æ–≤:")
                for i, product in enumerate(fallback_results[:3], 1):
                    logger.info(f"\n{i}. {product['name']}")
                    logger.info(f"   üí∞ {product['price']}")
                    logger.info(f"   üìä –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {product['relevance_score']:.1f}")
            else:
                logger.warning("‚ùå Fallback —Ç–æ–∂–µ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_simple_search())
