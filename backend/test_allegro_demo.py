#!/usr/bin/env python3
"""
–î–µ–º–æ-—Ç–µ—Å—Ç –Ω–æ–≤–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ Allegro —Å –±—ã—Å—Ç—Ä—ã–º–∏ fallback –º–µ—Ç–æ–¥–∞–º–∏
"""

import asyncio
import logging
from allegro_enhanced import AllegroEnhancedScraper, search_allegro_enhanced_sync

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_fallback_methods():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç fallback –º–µ—Ç–æ–¥—ã –Ω–∞–ø—Ä—è–º—É—é"""
    
    scraper = AllegroEnhancedScraper()
    test_queries = ["iphone 15", "macbook pro", "samsung galaxy", "laptop gaming"]
    
    for query in test_queries:
        logger.info(f"\n{'='*50}")
        logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback –¥–ª—è: '{query}'")
        logger.info(f"{'='*50}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π fallback –º–µ—Ç–æ–¥
        methods = [
            ("üì± –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è", scraper._try_mobile_version),
            ("üîå API endpoints", scraper._try_api_search),
            ("üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ endpoints", scraper._try_alternative_endpoints),
            ("üé≠ –î–µ–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", scraper._create_mock_results)
        ]
        
        for method_name, method in methods:
            try:
                logger.info(f"\n{method_name}:")
                results = method(query)
                
                if results:
                    logger.info(f"‚úÖ {len(results)} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ")
                    for i, product in enumerate(results[:2], 1):
                        logger.info(f"  {i}. {product['name'][:60]}...")
                        logger.info(f"     üí∞ {product['price']}")
                        logger.info(f"     üìä {product['relevance_score']:.1f}")
                    break  # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–ø—Ä–æ—Å—É
                else:
                    logger.warning(f"‚ùå {method_name} –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                    
            except Exception as e:
                logger.warning(f"‚ùå {method_name} –æ—à–∏–±–∫–∞: {e}")
                continue

def test_sync_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
    logger.info(f"\n{'='*60}")
    logger.info("üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º")
    logger.info(f"{'='*60}")
    
    test_query = "iphone 15"
    
    try:
        results = search_allegro_enhanced_sync(test_query, max_pages=1)
        
        if results:
            logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ç–æ–≤–∞—Ä–æ–≤")
            for i, product in enumerate(results[:3], 1):
                logger.info(f"\n{i}. {product['name']}")
                logger.info(f"   üí∞ {product['price']}")
                logger.info(f"   üè™ {product['seller']}")
                logger.info(f"   üìä –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {product['relevance_score']:.1f}")
                logger.info(f"   üîó {product['url'][:80]}...")
        else:
            logger.warning("‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback –º–µ—Ç–æ–¥—ã
    test_fallback_methods()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    test_sync_integration()
    
    logger.info(f"\n{'='*60}")
    logger.info("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    logger.info("üí° –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ:")
    logger.info("   - CAPTCHA_API_KEY –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è CAPTCHA")
    logger.info("   - –†–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏ –≤ proxy_list.txt")
    logger.info("   - –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫")
    logger.info(f"{'='*60}")
