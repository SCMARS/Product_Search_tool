#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π Allegro —Å OpenAI
"""

import json
import os
from dotenv import load_dotenv
from allegro import (
    generate_allegro_listing_template, 
    create_full_allegro_listing,
    generate_openai_description,
    generate_openai_parameters,
    generate_openai_tags
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_openai_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å OpenAI"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        print("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        print("–î–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY=your_api_key –≤ —Ñ–∞–π–ª .env")
        return False
    
    print("‚úÖ OPENAI_API_KEY –Ω–∞–π–¥–µ–Ω")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
    test_product = {
        'name': 'iPhone 13 Pro 128GB Czarny',
        'price': '4,299.00 z≈Ç',
        'url': 'https://allegro.pl/oferta/iphone-13-pro-128gb-czarny',
        'image': 'https://via.placeholder.com/300x200',
        'description': 'Nowy iPhone 13 Pro'
    }
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ–ø–∏—Å–∞–Ω–∏—è —Å OpenAI...")
    try:
        description = generate_openai_description(test_product['name'], test_product['price'])
        print(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ({len(description)} —Å–∏–º–≤–æ–ª–æ–≤)")
        print(f"üìù –ù–∞—á–∞–ª–æ –æ–ø–∏—Å–∞–Ω–∏—è: {description[:100]}...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
        return False
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å OpenAI...")
    try:
        parameters = generate_openai_parameters(test_product['name'])
        print(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã: {len(parameters)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        for key, value in list(parameters.items())[:3]:
            print(f"   {key}: {value}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
        return False
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–≥–æ–≤ —Å OpenAI...")
    try:
        tags = generate_openai_tags(test_product['name'])
        print(f"‚úÖ –¢–µ–≥–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã: {len(tags)} —Ç–µ–≥–æ–≤")
        print(f"   –¢–µ–≥–∏: {', '.join(tags[:5])}...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤: {e}")
        return False
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ–ª–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ —Å OpenAI...")
    try:
        template = create_full_allegro_listing(test_product, use_openai=True)
        print(f"‚úÖ –ü–æ–ª–Ω—ã–π —à–∞–±–ª–æ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {template['title']}")
        print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {template['category']}")
        print(f"   –¢–µ–≥–æ–≤: {len(template['tags'])}")
        print(f"   –° OpenAI: {template.get('generated_with_openai', False)}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
        return False
    
    return True

def test_batch_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞–∫–µ—Ç–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é"""
    
    test_products = [
        {
            'name': 'Samsung Galaxy S21 128GB Phantom Black',
            'price': '2,999.00 z≈Ç',
            'url': '',
            'image': '',
            'description': ''
        },
        {
            'name': 'MacBook Air M2 13" 256GB Space Gray',
            'price': '5,999.00 z≈Ç',
            'url': '',
            'image': '',
            'description': ''
        },
        {
            'name': 'Sony WH-1000XM4 S≈Çuchawki Bezprzewodowe',
            'price': '1,299.00 z≈Ç',
            'url': '',
            'image': '',
            'description': ''
        }
    ]
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
    
    templates = []
    for i, product in enumerate(test_products):
        try:
            template = generate_allegro_listing_template(product, use_openai=True)
            templates.append({
                'index': i,
                'product_name': product['name'],
                'template': template,
                'success': True
            })
            print(f"‚úÖ –®–∞–±–ª–æ–Ω {i+1} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {product['name'][:30]}...")
        except Exception as e:
            templates.append({
                'index': i,
                'product_name': product['name'],
                'error': str(e),
                'success': False
            })
            print(f"‚ùå –û—à–∏–±–∫–∞ —à–∞–±–ª–æ–Ω–∞ {i+1}: {e}")
    
    successful = len([t for t in templates if t['success']])
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
    print(f"   –í—Å–µ–≥–æ: {len(templates)}")
    print(f"   –£—Å–ø–µ—à–Ω–æ: {successful}")
    print(f"   –û—à–∏–±–æ–∫: {len(templates) - successful}")
    
    return successful == len(templates)

def save_test_results():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª"""
    
    test_product = {
        'name': 'iPhone 13 Pro 128GB Czarny',
        'price': '4,299.00 z≈Ç',
        'url': 'https://allegro.pl/oferta/iphone-13-pro-128gb-czarny',
        'image': 'https://via.placeholder.com/300x200',
        'description': 'Nowy iPhone 13 Pro'
    }
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã —Å OpenAI –∏ –±–µ–∑
        template_with_openai = create_full_allegro_listing(test_product, use_openai=True)
        template_without_openai = create_full_allegro_listing(test_product, use_openai=False)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = {
            'test_product': test_product,
            'template_with_openai': template_with_openai,
            'template_without_openai': template_without_openai,
            'comparison': {
                'description_length_openai': len(template_with_openai['description']),
                'description_length_fallback': len(template_without_openai['description']),
                'parameters_count_openai': len(template_with_openai['parameters']),
                'parameters_count_fallback': len(template_without_openai['parameters']),
                'tags_count_openai': len(template_with_openai['tags']),
                'tags_count_fallback': len(template_without_openai['tags'])
            }
        }
        
        with open('test_openai_results.json', 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        print("\nüíæ –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_openai_results.json")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        comp = results['comparison']
        print(f"\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ (OpenAI): {comp['description_length_openai']} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ (Fallback): {comp['description_length_fallback']} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã (OpenAI): {comp['parameters_count_openai']}")
        print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã (Fallback): {comp['parameters_count_fallback']}")
        print(f"   –¢–µ–≥–∏ (OpenAI): {comp['tags_count_openai']}")
        print(f"   –¢–µ–≥–∏ (Fallback): {comp['tags_count_fallback']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤ Allegro")
    print("=" * 70)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    if test_openai_integration():
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        if test_batch_generation():
            print("\n‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            print("\n‚ö†Ô∏è –ü–∞–∫–µ—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        save_test_results()
        
    else:
        print("\n‚ùå –¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI API") 