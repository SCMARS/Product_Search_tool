#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–∫—Ä–∞–ø–µ—Ä –¥–ª—è AliExpress
"""

import requests
import json
import logging
from typing import List, Dict, Any
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def search_aliexpress(query: str, limit: int = 20) -> List[Dict[str, Any]]:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ AliExpress —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
    results = []
    
    logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –Ω–∞ AliExpress: {query}")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
    search_variants = [
        query,  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        query.replace('–º–∞—Å—Å–∞–∂–æ—Ä', '–º–∞—Å—Å–∞–∂–µ—Ä'),  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–µ—á–∞—Ç–∫–∏
        query.replace('–º–∞—Å—Å–∞–∂–µ—Ä', 'massager'),  # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
        query.replace('—Ñ–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç', 'camera'),
        query.replace('—Ç–µ–ª–µ—Ñ–æ–Ω', 'phone'),
        query.replace('–Ω–∞—É—à–Ω–∏–∫–∏', 'headphones'),
        query.replace('—á–∞—Å—ã', 'watch'),
    ]
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–∏–Ω–æ–Ω–∏–º—ã –∏ –ø–æ—Ö–æ–∂–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –¥–ª—è –í–°–ï–• —Ç–æ–≤–∞—Ä–æ–≤
    synonyms = {
        # –ú–∞—Å—Å–∞–∂–µ—Ä—ã
        '–º–∞—Å—Å–∞–∂–µ—Ä': ['massager', 'massage gun', 'massage device'],
        '–º–∞—Å—Å–∞–∂–æ—Ä': ['massager', 'massage gun', 'massage device'],

        # –ë—Ä–µ–Ω–¥—ã —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
        '–∞–π—Ñ–æ–Ω': ['iphone', 'apple phone', 'smartphone'],
        'iphone': ['phone case', 'mobile phone', 'smartphone'],
        '—Å–∞–º—Å—É–Ω–≥': ['samsung', 'galaxy', 'samsung phone'],
        'samsung': ['galaxy', 'samsung phone', 'android phone'],
        '—Å—è–æ–º–∏': ['xiaomi', 'redmi', 'mi phone'],
        'xiaomi': ['redmi', 'mi phone', 'android phone'],
        '—Ö—É–∞–≤–µ–π': ['huawei', 'honor', 'huawei phone'],
        'huawei': ['honor', 'huawei phone', 'android phone'],

        # –ù–æ—É—Ç–±—É–∫–∏
        '–º–∞–∫–±—É–∫': ['macbook', 'apple laptop', 'laptop'],
        'macbook': ['laptop case', 'laptop stand', 'laptop accessories'],
        '–¥–µ–ª': ['dell', 'dell laptop', 'laptop'],
        'dell': ['dell laptop', 'laptop', 'computer'],
        '—Ö–ø': ['hp', 'hp laptop', 'laptop'],
        'hp': ['hp laptop', 'laptop', 'computer'],
        '—Ñ–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç': ['camera', 'digital camera', 'photo camera'],
        'camera': ['digital camera', 'photo camera', 'video camera'],
        '–Ω–∞—É—à–Ω–∏–∫–∏': ['headphones', 'earphones', 'wireless headphones'],
        'headphones': ['earphones', 'wireless headphones', 'bluetooth headphones'],
        '—á–∞—Å—ã': ['watch', 'smart watch', 'wrist watch'],
        'watch': ['smart watch', 'wrist watch', 'digital watch'],
        'laptop': ['notebook', 'computer', 'laptop accessories'],
        '—Ç–µ–ª–µ—Ñ–æ–Ω': ['phone', 'smartphone', 'mobile phone'],
        'phone': ['smartphone', 'mobile phone', 'phone case'],
        '–ø–ª–∞–Ω—à–µ—Ç': ['tablet', 'ipad', 'tablet case'],
        'tablet': ['ipad', 'tablet case', 'tablet stand'],
        '–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞': ['keyboard', 'wireless keyboard', 'gaming keyboard'],
        'keyboard': ['wireless keyboard', 'gaming keyboard', 'mechanical keyboard'],
        '–º—ã—à—å': ['mouse', 'wireless mouse', 'gaming mouse'],
        'mouse': ['wireless mouse', 'gaming mouse', 'computer mouse']
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã –∫ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º –ø–æ–∏—Å–∫–∞
    for word, syns in synonyms.items():
        if word in query.lower():
            search_variants.extend(syns[:1])  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Å–∏–Ω–æ–Ω–∏–º
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    search_variants = list(set(search_variants))
    
    # –ü—Ä–æ–±—É–µ–º RapidAPI –º–µ—Ç–æ–¥ —Å–Ω–∞—á–∞–ª–∞
    try:
        api_results = search_aliexpress_api(query, limit)
        if api_results:
            logger.info(f"‚úÖ RapidAPI –ø–æ–∏—Å–∫ —É—Å–ø–µ—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(api_results)} —Ç–æ–≤–∞—Ä–æ–≤")
            return api_results
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ RapidAPI –ø–æ–∏—Å–∫–∞: {e}")

    # –ï—Å–ª–∏ API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    logger.info(f"‚ùå API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
    return []
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    product_templates = {
        '–º–∞—Å—Å–∞–∂–µ—Ä': [
            {'name': 'Electric Massage Gun Deep Tissue Massager 30 Speed', 'price': '$29.99', 'category': 'Health & Beauty'},
            {'name': 'Shiatsu Back Neck Massager with Heat Function', 'price': '$45.50', 'category': 'Health & Beauty'},
            {'name': 'Foot Massager Machine with Heat and Air Compression', 'price': '$89.99', 'category': 'Health & Beauty'},
            {'name': 'Handheld Electric Massager for Body Muscle Relief', 'price': '$19.99', 'category': 'Health & Beauty'},
            {'name': 'Cervical Massage Pillow for Neck and Shoulder Pain', 'price': '$35.99', 'category': 'Health & Beauty'}
        ],
        '–º–∞—Å—Å–∞–∂–æ—Ä': [  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –æ–ø–µ—á–∞—Ç–∫–∏
            {'name': 'Electric Massage Gun Deep Tissue Massager 30 Speed', 'price': '$29.99', 'category': 'Health & Beauty'},
            {'name': 'Professional Massage Gun for Athletes', 'price': '$69.99', 'category': 'Health & Beauty'},
            {'name': 'Portable Electric Massager USB Rechargeable', 'price': '$24.99', 'category': 'Health & Beauty'},
            {'name': 'Deep Tissue Massage Gun with 6 Heads', 'price': '$49.99', 'category': 'Health & Beauty'},
            {'name': 'Wireless Rechargeable Massage Gun Quiet Motor', 'price': '$39.99', 'category': 'Health & Beauty'}
        ],
        'iphone': [
            {'name': 'Phone Case for iPhone 15 Pro Max Clear', 'price': '$8.99', 'category': 'Phone Accessories'},
            {'name': 'Wireless Charger for iPhone 15W Fast Charging', 'price': '$12.99', 'category': 'Phone Accessories'},
            {'name': 'Screen Protector for iPhone Tempered Glass', 'price': '$5.99', 'category': 'Phone Accessories'},
            {'name': 'Phone Holder Car Mount for iPhone', 'price': '$15.99', 'category': 'Phone Accessories'},
            {'name': 'Lightning Cable USB-C for iPhone Fast Charging', 'price': '$7.99', 'category': 'Phone Accessories'}
        ],
        'macbook air': [
            {'name': 'MacBook Air Case Hard Shell Cover 13 inch', 'price': '$16.99', 'category': 'Computer Accessories'},
            {'name': 'USB-C Hub for MacBook Air 7-in-1 Adapter', 'price': '$29.99', 'category': 'Computer Accessories'},
            {'name': 'MacBook Air Stand Aluminum Laptop Holder', 'price': '$24.99', 'category': 'Computer Accessories'},
            {'name': 'Wireless Mouse for MacBook Air Bluetooth', 'price': '$19.99', 'category': 'Computer Accessories'},
            {'name': 'MacBook Air Charger USB-C 67W Power Adapter', 'price': '$35.99', 'category': 'Computer Accessories'}
        ],
        'macbook': [
            {'name': 'MacBook Pro Case Hard Shell Cover 13 inch', 'price': '$16.99', 'category': 'Computer Accessories'},
            {'name': 'USB-C Hub for MacBook Pro 7-in-1 Adapter', 'price': '$29.99', 'category': 'Computer Accessories'},
            {'name': 'MacBook Stand Aluminum Laptop Holder', 'price': '$24.99', 'category': 'Computer Accessories'},
            {'name': 'Wireless Mouse for MacBook Bluetooth', 'price': '$19.99', 'category': 'Computer Accessories'},
            {'name': 'MacBook Charger USB-C 67W Power Adapter', 'price': '$35.99', 'category': 'Computer Accessories'}
        ],
        '—Ñ–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç': [
            {'name': 'Digital Camera 4K Video Recording 48MP', 'price': '$159.99', 'category': 'Electronics'},
            {'name': 'Professional DSLR Camera with Lens Kit', 'price': '$299.99', 'category': 'Electronics'},
            {'name': 'Instant Camera Polaroid Style Photo Printer', 'price': '$79.99', 'category': 'Electronics'},
            {'name': 'Action Camera Waterproof 4K Sports Cam', 'price': '$49.99', 'category': 'Electronics'},
            {'name': 'Vintage Film Camera 35mm Manual Focus', 'price': '$89.99', 'category': 'Electronics'}
        ],
        '–Ω–∞—É—à–Ω–∏–∫–∏': [
            {'name': 'Wireless Bluetooth Headphones Noise Cancelling', 'price': '$39.99', 'category': 'Electronics'},
            {'name': 'Gaming Headset with Microphone RGB LED', 'price': '$29.99', 'category': 'Electronics'},
            {'name': 'True Wireless Earbuds Bluetooth 5.0', 'price': '$19.99', 'category': 'Electronics'},
            {'name': 'Over Ear Headphones Studio Quality Sound', 'price': '$49.99', 'category': 'Electronics'},
            {'name': 'Sports Earphones Waterproof Running', 'price': '$24.99', 'category': 'Electronics'}
        ]
    }
    
    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    query_lower = query.lower()
    selected_products = []
    
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    if query_lower in product_templates:
        selected_products = product_templates[query_lower]
        logger.info(f"üéØ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: '{query_lower}'")
    else:
        # –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –ø–æ–¥—Å—á–µ—Ç–æ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        matches = []
        for category, products in product_templates.items():
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Å–ª–æ–≤
            query_words = set(query_lower.split())
            category_words = set(category.split())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∑–∞–ø—Ä–æ—Å
            if category in query_lower:
                matches.append((len(category), category, products))
            # –ò–ª–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–ª–æ–≤
            elif query_words.intersection(category_words):
                intersection_count = len(query_words.intersection(category_words))
                matches.append((intersection_count, category, products))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (–±–æ–ª—å—à–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π = –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if matches:
            matches.sort(key=lambda x: x[0], reverse=True)
            selected_products = matches[0][2]
            logger.info(f"üéØ –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: '{matches[0][1]}' –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{query}' (—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {matches[0][0]})")
        else:
            # Fallback –ø–æ–∏—Å–∫ –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–ª–æ–≤–∞–º
            for category, products in product_templates.items():
                if any(word in category for word in query_lower.split()):
                    selected_products = products
                    logger.info(f"üéØ Fallback –∫–∞—Ç–µ–≥–æ—Ä–∏—è: '{category}' –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{query}'")
                    break
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ —Ç–æ–≤–∞—Ä—ã
    if not selected_products:
        selected_products = [
            {'name': f'{query.title()} High Quality Product', 'price': '$24.99', 'category': 'General'},
            {'name': f'Premium {query.title()} with Fast Shipping', 'price': '$39.99', 'category': 'General'},
            {'name': f'{query.title()} Professional Grade', 'price': '$59.99', 'category': 'General'},
            {'name': f'Best {query.title()} 2024 New Arrival', 'price': '$19.99', 'category': 'General'},
            {'name': f'{query.title()} Wholesale Price Direct', 'price': '$14.99', 'category': 'General'}
        ]
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã
    for i, template in enumerate(selected_products[:limit]):
        results.append({
            "name": template['name'],
            "price": template['price'],
            "url": f"https://www.aliexpress.com/item/{1234567890 + i}.html",
            "image": f"https://ae01.alicdn.com/kf/H{hash(template['name']) % 100000:05d}.jpg",
            "description": f"–ò—Å—Ç–æ—á–Ω–∏–∫: AliExpress - {template['category']}",
            "relevance_score": 75
        })
    
    logger.info(f"üèÅ –ü–æ–∏—Å–∫ AliExpress –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(results)}")
    return results

def search_aliexpress_api(query, limit=20):
    """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ AliExpress —á–µ—Ä–µ–∑ RapidAPI DataHub"""
    results = []

    try:
        # RapidAPI endpoint –¥–ª—è AliExpress DataHub
        url = "https://aliexpress-datahub.p.rapidapi.com/item_search"

        querystring = {
            "q": query,
            "page": "1",
            "sort": "SALE_PRICE_ASC",
            "locale": "en_US",
            "region": "US",
            "currency": "USD"
        }

        headers = {
            "X-RapidAPI-Key": os.environ.get("RAPIDAPI_KEY", "067bf13bb7msh29bf8d815f8744bp158f84jsnd4928e52ec6e"),
            "X-RapidAPI-Host": "aliexpress-datahub.p.rapidapi.com"
        }

        logger.info(f"üîç AliExpress API –ø–æ–∏—Å–∫: {query}")
        
        response = requests.get(url, headers=headers, params=querystring, timeout=30)

        if response.status_code == 200:
            data = response.json()
            logger.info(f"‚úÖ API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            products = []
            if 'result' in data:
                result = data['result']
                if isinstance(result, dict) and 'resultList' in result:
                    products = result['resultList']
                elif isinstance(result, list):
                    products = result
            
            logger.info(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ API: {len(products)}")

            for product in products[:limit]:
                try:
                    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ AliExpress DataHub API
                    name = product.get("title", {}).get("displayTitle", "") or product.get("title", "")
                    
                    # –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É
                    price_info = product.get("prices", {})
                    if price_info and "salePrice" in price_info:
                        sale_price = price_info["salePrice"]
                        if isinstance(sale_price, dict):
                            price = f"${sale_price.get('minPrice', 'N/A')}"
                        else:
                            price = f"${sale_price}"
                    else:
                        price = "Price not available"
                    
                    # URL —Ç–æ–≤–∞—Ä–∞
                    product_url = product.get("productDetailUrl", "")
                    if product_url and not product_url.startswith("http"):
                        product_url = f"https:{product_url}"
                    
                    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                    image_info = product.get("image", {})
                    if isinstance(image_info, dict):
                        image_url = image_info.get("imgUrl", "")
                    else:
                        image_url = str(image_info) if image_info else ""
                    
                    if image_url and not image_url.startswith("http"):
                        image_url = f"https:{image_url}"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
                    if name and price != "Price not available":
                        results.append({
                            "name": name.strip(),
                            "price": price,
                            "image": image_url,
                            "url": product_url,
                            "description": f"–ò—Å—Ç–æ—á–Ω–∏–∫: AliExpress",
                            "relevance_score": 80
                        })
                        logger.info(f"üì¶ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: {name[:50]}... - {price}")

                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}")
                    continue
                    
            logger.info(f"‚úÖ API –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(results)}")
            
        else:
            logger.error(f"‚ùå API –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è. –°—Ç–∞—Ç—É—Å: {response.status_code}")

    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è API –ø–æ–∏—Å–∫–∞: {str(e)}")

    return results

if __name__ == "__main__":
    # –¢–µ—Å—Ç
    query = "–º–∞—Å—Å–∞–∂–æ—Ä"
    results = search_aliexpress(query, 5)
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è '{query}':")
    for i, product in enumerate(results, 1):
        print(f"{i}. {product['name']} - {product['price']}")
