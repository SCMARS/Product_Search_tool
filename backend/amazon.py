import requests
from bs4 import BeautifulSoup
import logging
import time
import random
import os
from urllib.parse import urlencode, quote_plus
from typing import List, Dict, Any

logger = logging.getLogger(__name__)

def matches_query(product_name, query, min_score=30):
    """

    """
    if not product_name or not query:
        return False

    product_lower = product_name.lower()
    query_lower = query.lower()

    # –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ª–æ–≤–∞
    query_words = query_lower.split()

    # –ë–∞–∑–æ–≤—ã–π —Å—á–µ—Ç - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Å–ª–æ–≤
    score = 0
    matched_words = 0

    # –°–£–ü–ï–† –ë–û–ù–£–° –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤—Å–µ–π —Ñ—Ä–∞–∑—ã
    if query_lower in product_lower:
        score += 200  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        logger.debug(f"üéØ –¢–û–ß–ù–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï: '{query_lower}' –≤ '{product_lower}'")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    for word in query_words:
        if len(word) > 1 and word in product_lower:  # –£—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–∂–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∞–∂–Ω—ã–µ —Å–ª–æ–≤–∞
            if len(word) <= 2:
                score += 15   # –ú–∞–ª–µ–Ω—å–∫–∏–π –±–æ–Ω—É—Å –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞ (11, 16, pro)
            elif len(word) <= 4:
                score += 30  # –°—Ä–µ–¥–Ω–∏–π –±–æ–Ω—É—Å –∑–∞ —Å—Ä–µ–¥–Ω–∏–µ —Å–ª–æ–≤–∞ (ipad, pro)
            else:
                score += 40  # –ë–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∑–∞ –¥–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
            matched_words += 1


    if len(query_words) > 0:
        match_percentage = matched_words / len(query_words)
        score += int(match_percentage * 60)  # –î–æ 60 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤

    # –û–ì–†–û–ú–ù–´–ô –±–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –≤ –Ω–∞—á–∞–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    if len(query_words) >= 1:
        brand = query_words[0]  # –ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∫–∞–∫ –±—Ä–µ–Ω–¥
        if product_lower.startswith(brand.lower()) or f" {brand.lower()} " in product_lower:
            score += 100  # –ë–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±—Ä–µ–Ω–¥

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–∞–∑—ã –∏–∑ 2 —Å–ª–æ–≤
    for i in range(len(query_words) - 1):
        phrase = f"{query_words[i]} {query_words[i+1]}"
        if len(phrase) > 3 and phrase in product_lower:  # –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞
            score += 50  # –ë–æ–Ω—É—Å –∑–∞ —Ñ—Ä–∞–∑—É –∏–∑ 2 —Å–ª–æ–≤

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–∞–∑—ã –∏–∑ 3 —Å–ª–æ–≤
    for i in range(len(query_words) - 2):
        phrase = f"{query_words[i]} {query_words[i+1]} {query_words[i+2]}"
        if phrase in product_lower:
            score += 80  # –ë–æ–ª—å—à–∏–π –±–æ–Ω—É—Å –∑–∞ —Ñ—Ä–∞–∑—É –∏–∑ 3 —Å–ª–æ–≤

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–∞–∑—ã –∏–∑ 4+ —Å–ª–æ–≤
    for i in range(len(query_words) - 3):
        phrase = " ".join(query_words[i:i+4])
        if phrase in product_lower:
            score += 120  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –¥–ª–∏–Ω–Ω—É—é —Ñ—Ä–∞–∑—É

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    if query_lower in product_lower:
        score += 80

    # –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤, —Ç–æ –æ–Ω –ù–ï —è–≤–ª—è–µ—Ç—Å—è —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–º
    accessory_strict_keywords = ['h√ºlle', 'case', 'cover', 'schutz', 'protection', 'folie', 'screen protector', 
                               'panzerglas', 'powerbank', 'charger', 'ladeger√§t', 'kabel', 'cable', 'adapter',
                               'st√ºck', 'pack', 'set', 'kit', 'zubeh√∂r', 'accessory', 'protector', 'guard',
                               'displayschutz', 'kamera', 'camera', 'schutzglas', 'protection glass']
    if any(keyword in product_lower for keyword in accessory_strict_keywords):
        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤, —Ç–æ –æ–Ω –ù–ï —è–≤–ª—è–µ—Ç—Å—è —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–º
        return 0  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–∫–ª—é—á–∞–µ–º –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è iPhone
    if 'iphone' in query_lower:
        # –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω—É—é –º–æ–¥–µ–ª—å iPhone
        if '16' in query_lower and '16' in product_lower:
            score += 60
        if 'pro' in query_lower and 'pro' in product_lower:
            score += 50
        if 'max' in query_lower and 'max' in product_lower:
            score += 50
        
        # –ë–æ–Ω—É—Å –∑–∞ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ —è–≤–ª—è—é—Ç—Å—è —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞–º–∏
        phone_keywords = ['gb', 'tb', 'handy', 'smartphone', 'mobile', 'telefon', 'phone']
        if any(keyword in product_lower for keyword in phone_keywords):
            score += 40  # –ë–æ–Ω—É—Å –∑–∞ —Å–º–∞—Ä—Ç—Ñ–æ–Ω

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    special_names = {
        'apple mouse': ['magic mouse', 'apple magic mouse'],
        'apple keyboard': ['magic keyboard', 'apple magic keyboard'],
        'apple watch': ['apple watch', 'iwatch'],
        'airpods': ['airpods', 'air pods'],
        'iphone': ['iphone'],
        'macbook': ['macbook'],
        'ipad': ['ipad'],
        'silicone caulking tools': ['silicone seam tool', 'caulking tool', 'silicone tool', 'seam tool'],
        'caulking tools': ['caulking tool', 'seam tool', 'silicone tool'],
        'silicone tools': ['silicone tool', 'caulking tool', 'seam tool'],
        'electric mosquito swatter': ['elektrische fliegenklatsche', 'electric fly swatter', 'mosquito killer'],
        'mosquito swatter': ['fliegenklatsche', 'fly swatter', 'mosquito killer'],
        'electric fly swatter': ['elektrische fliegenklatsche', 'electric mosquito swatter', 'fly killer']
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    for search_term, alternatives in special_names.items():
        if search_term in query_lower:
            for alt_name in alternatives:
                if alt_name in product_lower:
                    score += 50  # –ë–æ–Ω—É—Å –∑–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ

    # –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥—É—Ç –ª–∏ —Å–ª–æ–≤–∞ –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ —á—Ç–æ –∏ –≤ –∑–∞–ø—Ä–æ—Å–µ
    last_position = -1
    ordered_words = 0
    for word in query_words:
        if len(word) > 2:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
            position = product_lower.find(word)
            if position > last_position:
                ordered_words += 1
                last_position = position

    # –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
    if len(query_words) > 1:
        order_bonus = (ordered_words / len(query_words)) * 30
        score += int(order_bonus)

    # –®—Ç—Ä–∞—Ñ –∑–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è (–º–æ–≥—É—Ç –±—ã—Ç—å —Å–ø–∞–º)
    if len(product_name) > 200:
        score -= 20


    if len(product_name) < 10:
        score -= 20

    # –ë–æ–Ω—É—Å –∑–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
    key_positions = ['tool', 'kit', 'set', 'professional', 'premium', 'electric', 'electronic']
    for key_word in key_positions:
        if key_word in product_lower:
            score += 8

    # –®—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å–ª–æ–≤–∞
    irrelevant_words = ['case', 'cover', 'protector', 'screen', 'film', 'adapter', 'cable', 'charger']
    for word in irrelevant_words:
        if word in product_lower and word not in query_lower:
            score -= 5

    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ score
    if score >= min_score:
        logger.debug(f"‚úÖ –¢–æ–≤–∞—Ä –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä: '{product_name[:50]}...' (score: {score})")
        return score
    else:
        logger.debug(f"‚ùå –¢–æ–≤–∞—Ä –Ω–µ –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä: '{product_name[:50]}...' (score: {score})")
        return 0

def search_amazon(query, limit=10, max_pages=1):
    """
    –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Amazon.de - –¢–û–õ–¨–ö–û –†–ï–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´
    """
    results = []
    
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept-Language': 'de-DE,de;q=0.9,en;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        }
        
        # –¢–û–õ–¨–ö–û –ü–ï–†–í–ê–Ø –°–¢–†–ê–ù–ò–¶–ê
        page = 1
        logger.info(f"Searching page {page}...")

        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        search_params = {
            'k': query,
            'ref': 'sr_pg_1',
            'sprefix': query.replace(' ', '+'),  # –ü–æ–º–æ–≥–∞–µ—Ç —Å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º
            'crid': '1234567890'  # –°–ª—É—á–∞–π–Ω—ã–π ID –¥–ª—è —Å–µ—Å—Å–∏–∏
        }

        url = f"https://www.amazon.de/s?{urlencode(search_params)}"
        logger.info(f"üîç Amazon URL: {url}")

        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()

        soup = BeautifulSoup(response.content, 'html.parser')



        # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        products = soup.find_all('div', {'data-component-type': 's-search-result'})

        logger.info(f"Found {len(products)} products on page {page}")

        logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(products)} —Ç–æ–≤–∞—Ä–æ–≤...")

        for i, product in enumerate(products):
            if len(results) >= limit:
                break

            logger.debug(f"üîç –¢–æ–≤–∞—Ä {i+1}/{len(products)}")

            try:
                # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                title = None
                title_selectors = [
                    'h2 a span',  # –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä
                    'h2 span',    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π
                    'h2 a',       # –°—Å—ã–ª–∫–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
                    'h2',         # –°–∞–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    '.a-size-medium',  # –ö–ª–∞—Å—Å —Ä–∞–∑–º–µ—Ä–∞
                    '.a-size-mini'     # –ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä
                ]

                for selector in title_selectors:
                    title_elem = product.select_one(selector)
                    if title_elem:
                        title = title_elem.get_text(strip=True)
                        if title and len(title) > 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
                            break

                if not title:
                    logger.debug("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
                    continue

                logger.debug(f"üì¶ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: {title[:60]}...")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∏ –ø–æ–ª—É—á–∞–µ–º score
                relevance_score = matches_query(title, query)
                if relevance_score < 100:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π score –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    continue

                logger.info(f"‚úÖ –¢–æ–≤–∞—Ä –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä: {title[:50]}...")

                # –¶–µ–Ω–∞ - —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å –ø–æ–ª–Ω–æ–π —Ü–µ–Ω–æ–π
                price = "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª–Ω—É—é —Ü–µ–Ω—É –≤ –±–ª–æ–∫–µ .a-price
                price_container = product.select_one('.a-price')
                if price_container:
                    # –ò—â–µ–º —Å–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç —Å –ø–æ–ª–Ω–æ–π —Ü–µ–Ω–æ–π
                    offscreen = price_container.select_one('.a-offscreen')
                    if offscreen:
                        price_text = offscreen.get_text(strip=True)
                        if price_text and any(char.isdigit() for char in price_text):
                            price = price_text
                            logger.debug(f"üí∞ –ù–∞–π–¥–µ–Ω–∞ –ø–æ–ª–Ω–∞—è —Ü–µ–Ω–∞: {price}")
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–∫—Ä—ã—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, —Å–æ–±–∏—Ä–∞–µ–º —Ü–µ–Ω—É –∏–∑ —á–∞—Å—Ç–µ–π
                        whole_part = price_container.select_one('.a-price-whole')
                        fraction_part = price_container.select_one('.a-price-fraction')
                        symbol_part = price_container.select_one('.a-price-symbol')

                        if whole_part:
                            whole_text = whole_part.get_text(strip=True)
                            symbol_text = symbol_part.get_text(strip=True) if symbol_part else ""
                            fraction_text = fraction_part.get_text(strip=True) if fraction_part else ""

                            # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—É—é —Ü–µ–Ω—É
                            if fraction_text:
                                price = f"{symbol_text}{whole_text},{fraction_text}"
                            else:
                                price = f"{symbol_text}{whole_text}"
                            logger.debug(f"üí∞ –°–æ–±—Ä–∞–Ω–∞ —Ü–µ–Ω–∞ –∏–∑ —á–∞—Å—Ç–µ–π: {price}")

                # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                if price == "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞":
                    price_selectors = [
                        '.a-price .a-offscreen',  # –¶–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ —Ü–µ–Ω—ã
                        '.a-price-range',  # –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
                        '.a-text-price',   # –¢–µ–∫—Å—Ç–æ–≤–∞—è —Ü–µ–Ω–∞
                        '.a-color-price',   # –¶–≤–µ—Ç–Ω–∞—è —Ü–µ–Ω–∞
                        'span[class*="price"]'  # –õ—é–±–æ–π span —Å price –≤ –∫–ª–∞—Å—Å–µ
                    ]

                    for selector in price_selectors:
                        price_elem = product.select_one(selector)
                        if price_elem:
                            price_text = price_elem.get_text(strip=True)
                            if price_text and any(char.isdigit() for char in price_text):
                                price = price_text
                                logger.debug(f"üí∞ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä '{selector}': {price}")
                                break

                # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç —Å —Å–∏–º–≤–æ–ª–∞–º–∏ –≤–∞–ª—é—Ç
                if price == "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞":
                    price_patterns = product.find_all(text=lambda text: text and ('‚Ç¨' in text or '$' in text or '¬£' in text) and any(c.isdigit() for c in text))
                    if price_patterns:
                        price = price_patterns[0].strip()
                        logger.debug(f"üí∞ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ —á–µ—Ä–µ–∑ –ø–∞—Ç—Ç–µ—Ä–Ω: {price}")

                # –°—Å—ã–ª–∫–∞ - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                link = ""
                link_selectors = [
                    'h2 a',  # –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä
                    'a[data-component-type="s-product-image"]',  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    'a.a-link-normal',  # –û–±—ã—á–Ω–∞—è —Å—Å—ã–ª–∫–∞
                    '.s-link-style a',  # –°—Å—ã–ª–∫–∞ –≤ —Å—Ç–∏–ª–µ –ø–æ–∏—Å–∫–∞
                    'a[href*="/dp/"]',  # –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä
                    'a[href*="/gp/product/"]'  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä
                ]

                for selector in link_selectors:
                    link_elem = product.select_one(selector)
                    if link_elem and link_elem.get('href'):
                        href = link_elem['href']
                        if href.startswith('/'):
                            link = f"https://www.amazon.de{href}"
                        else:
                            link = href
                        logger.debug(f"üîó –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä '{selector}': {link[:50]}...")
                        break

                if not link:
                    logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {title[:30]}...")

                # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image = ""
                img_elem = product.select_one('img.s-image')
                if img_elem and img_elem.get('src'):
                    image = img_elem['src']

                # –û–ø–∏—Å–∞–Ω–∏–µ - –∏–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                description = "–ù–∞–π–¥–µ–Ω–æ –Ω–∞ Amazon.de"

                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                desc_selectors = [
                    '.a-size-base-plus',  # –û—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                    '.a-size-base',       # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                    '.s-size-mini',       # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                    '[data-cy="title-recipe-review-snippet"]',  # –û—Ç–∑—ã–≤—ã
                    '.a-row .a-size-small'  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                ]

                for desc_selector in desc_selectors:
                    desc_elem = product.select_one(desc_selector)
                    if desc_elem:
                        desc_text = desc_elem.get_text(strip=True)
                        if desc_text and len(desc_text) > 20 and desc_text != title:
                            description = desc_text[:200] + "..." if len(desc_text) > 200 else desc_text
                            break

                # –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
                if description == "–ù–∞–π–¥–µ–Ω–æ –Ω–∞ Amazon.de":
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
                    key_features = []
                    if 'bluetooth' in title.lower():
                        key_features.append('Bluetooth')
                    if 'wireless' in title.lower() or 'kabellos' in title.lower():
                        key_features.append('–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–æ–π')
                    if 'rechargeable' in title.lower() or 'wiederaufladbar' in title.lower():
                        key_features.append('–ü–µ—Ä–µ–∑–∞—Ä—è–∂–∞–µ–º—ã–π')
                    if 'waterproof' in title.lower() or 'wasserdicht' in title.lower():
                        key_features.append('–í–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º—ã–π')
                    if any(word in title.lower() for word in ['gb', 'tb', 'mb']):
                        storage_match = next((word for word in title.split() if any(unit in word.lower() for unit in ['gb', 'tb', 'mb'])), None)
                        if storage_match:
                            key_features.append(f'–ü–∞–º—è—Ç—å: {storage_match}')

                    if key_features:
                        description = f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {', '.join(key_features)}. –ù–∞–π–¥–µ–Ω–æ –Ω–∞ Amazon.de"
                    else:
                        description = f"–¢–æ–≤–∞—Ä –æ—Ç Amazon.de. –¶–µ–Ω–∞: {price}"

                product_data = {
                    'name': title,
                    'price': price,
                    'url': link,
                    'image': image,
                    'description': description,
                    'relevance_score': relevance_score  # –î–æ–±–∞–≤–ª—è–µ–º score –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                }

                results.append(product_data)
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: {title[:40]}... | –¶–µ–Ω–∞: {price}")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
                continue
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ Amazon: {e}")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ relevance_score)
    if results:
        try:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            results.sort(key=lambda x: x.get('relevance_score', 0), reverse=True)
            logger.info(f"‚úÖ Amazon —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏")
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {e}")

    # –ù–ï–¢ –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–• - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if not results:
        logger.info("‚ùå Amazon –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    return results
