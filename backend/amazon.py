import requests
from bs4 import BeautifulSoup
import logging
import time
import random
import os
from urllib.parse import urlencode, quote_plus
from typing import List, Dict, Any

logger = logging.getLogger(__name__)

def matches_query(product_name, query, min_score=30):
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞
    """
    if not product_name or not query:
        return 0.0

    product_lower = product_name.lower()
    query_lower = query.lower()

    # –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ª–æ–≤–∞
    query_words = query_lower.split()

    # –ë–∞–∑–æ–≤—ã–π —Å—á–µ—Ç - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Å–ª–æ–≤
    score = 0
    matched_words = 0

    # –°–£–ü–ï–† –ë–û–ù–£–° –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤—Å–µ–π —Ñ—Ä–∞–∑—ã
    if query_lower in product_lower:
        score += 200  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        logger.debug(f"üéØ –¢–û–ß–ù–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï: '{query_lower}' –≤ '{product_lower}'")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    for word in query_words:
        if len(word) > 1 and word in product_lower:  # –£—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–∂–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∞–∂–Ω—ã–µ —Å–ª–æ–≤–∞
            if len(word) <= 2:
                score += 15   # –ú–∞–ª–µ–Ω—å–∫–∏–π –±–æ–Ω—É—Å –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞ (11, 16, pro)
            elif len(word) <= 4:
                score += 30  # –°—Ä–µ–¥–Ω–∏–π –±–æ–Ω—É—Å –∑–∞ —Å—Ä–µ–¥–Ω–∏–µ —Å–ª–æ–≤–∞ (ipad, pro)
            else:
                score += 40  # –ë–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∑–∞ –¥–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
            matched_words += 1

    if len(query_words) > 0:
        match_percentage = matched_words / len(query_words)
        score += int(match_percentage * 60)  # –î–æ 60 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤

    # –û–ì–†–û–ú–ù–´–ô –±–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –≤ –Ω–∞—á–∞–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    if len(query_words) >= 1:
        brand = query_words[0]  # –ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∫–∞–∫ –±—Ä–µ–Ω–¥
        if product_lower.startswith(brand.lower()) or f" {brand.lower()} " in product_lower:
            score += 100  # –ë–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±—Ä–µ–Ω–¥

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–∞–∑—ã –∏–∑ 2 —Å–ª–æ–≤
    for i in range(len(query_words) - 1):
        phrase = f"{query_words[i]} {query_words[i+1]}"
        if len(phrase) > 3 and phrase in product_lower:  # –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞
            score += 50  # –ë–æ–Ω—É—Å –∑–∞ —Ñ—Ä–∞–∑—É –∏–∑ 2 —Å–ª–æ–≤

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–∞–∑—ã –∏–∑ 3 —Å–ª–æ–≤
    for i in range(len(query_words) - 2):
        phrase = f"{query_words[i]} {query_words[i+1]} {query_words[i+2]}"
        if phrase in product_lower:
            score += 80  # –ë–æ–ª—å—à–∏–π –±–æ–Ω—É—Å –∑–∞ —Ñ—Ä–∞–∑—É –∏–∑ 3 —Å–ª–æ–≤

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–∞–∑—ã –∏–∑ 4+ —Å–ª–æ–≤
    for i in range(len(query_words) - 3):
        phrase = " ".join(query_words[i:i+4])
        if phrase in product_lower:
            score += 120  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –¥–ª–∏–Ω–Ω—É—é —Ñ—Ä–∞–∑—É

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    if query_lower in product_lower:
        score += 80

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è SKIRCO –∏ –ø–æ–¥–æ–±–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    if 'skirco' in query_lower or 'skir\'co' in query_lower:
        # –ï—Å–ª–∏ –∏—â–µ–º SKIRCO, —Ç–æ –ª—é–±–æ–π —Ç–æ–≤–∞—Ä —Å SKIRCO –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å
        if 'skirco' in product_lower or 'skir\'co' in product_lower:
            score += 150  # –ë–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∑–∞ SKIRCO
            logger.debug(f"üéØ SKIRCO —Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω: {product_name}")

    # –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤, —Ç–æ –æ–Ω –ù–ï —è–≤–ª—è–µ—Ç—Å—è —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–º
    accessory_strict_keywords = ['h√ºlle', 'case', 'cover', 'schutz', 'protection', 'folie', 'screen protector', 
                               'panzerglas', 'powerbank', 'charger', 'ladeger√§t', 'kabel', 'cable', 'adapter',
                               'st√ºck', 'pack', 'set', 'kit', 'zubeh√∂r', 'accessory', 'protector', 'guard',
                               'displayschutz', 'kamera', 'camera', 'schutzglas', 'protection glass']
    
    # –¢–æ–ª—å–∫–æ –¥–ª—è iPhone –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
    if 'iphone' in query_lower and any(keyword in product_lower for keyword in accessory_strict_keywords):
        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤, —Ç–æ –æ–Ω –ù–ï —è–≤–ª—è–µ—Ç—Å—è —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–º
        return 0.0  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–∫–ª—é—á–∞–µ–º –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è iPhone
    if 'iphone' in query_lower:
        # –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω—É—é –º–æ–¥–µ–ª—å iPhone
        if '16' in query_lower and '16' in product_lower:
            score += 60
        if 'pro' in query_lower and 'pro' in product_lower:
            score += 50
        if 'max' in query_lower and 'max' in product_lower:
            score += 50
        
        # –ë–æ–Ω—É—Å –∑–∞ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ —è–≤–ª—è—é—Ç—Å—è —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞–º–∏
        phone_keywords = ['gb', 'tb', 'handy', 'smartphone', 'mobile', 'telefon', 'phone']
        if any(keyword in product_lower for keyword in phone_keywords):
            score += 40  # –ë–æ–Ω—É—Å –∑–∞ —Å–º–∞—Ä—Ç—Ñ–æ–Ω

        return float(score)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    return float(score)

def search_amazon(query, limit=50, max_pages=1):
    """
    –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Amazon.de - –í–°–ï –ù–ê–ô–î–ï–ù–ù–´–ï –¢–û–í–ê–†–´
    """
    results = []
    
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept-Language': 'de-DE,de;q=0.9,en;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache',
            'Sec-Fetch-Dest': 'document',
            'Sec-Fetch-Mode': 'navigate',
            'Sec-Fetch-Site': 'none',
            'Sec-Fetch-User': '?1',
            'DNT': '1',
            'Referer': 'https://www.amazon.de/'
        }
        
        # –¢–û–õ–¨–ö–û –ü–ï–†–í–ê–Ø –°–¢–†–ê–ù–ò–¶–ê
        page = 1
        logger.info(f"Searching page {page}...")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π URL
        url = f"https://www.amazon.de/s?k={quote_plus(query)}"
        logger.info(f"üîç Amazon URL: {url}")

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
        time.sleep(2)
        
        response = requests.get(url, headers=headers, timeout=20)
        
        logger.info(f"üì° Amazon response status: {response.status_code}")
        
        if response.status_code != 200:
            logger.error(f"‚ùå Amazon –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {response.status_code}")
            return results

        soup = BeautifulSoup(response.content, 'html.parser')

        # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
        products = []
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        selectors = [
            'div[data-component-type="s-search-result"]',
            'div.s-result-item',
            'div[data-asin]',
            'div.a-section.a-spacing-base',
            'div[class*="s-result-item"]',
            'div[data-component-type="s-search-result"]'
        ]
        
        for selector in selectors:
            products = soup.select(selector)
            if products:
                logger.info(f"Found {len(products)} products with selector: {selector}")
                break

        if not products:
            logger.warning("No products found with any selector")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—ã–µ —Ç–æ–≤–∞—Ä—ã
            products = soup.find_all('div', {'data-asin': True})
            if products:
                logger.info(f"Found {len(products)} products with data-asin")
            else:
                logger.warning("No products found at all")
                return results

        logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(products)} —Ç–æ–≤–∞—Ä–æ–≤...")

        for i, product in enumerate(products):
            if len(results) >= limit:
                break

            try:
                # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
                title = None
                title_selectors = [
                    'h2 a span',
                    'h2 span',
                    'h2 a',
                    'h2',
                    '.a-size-medium',
                    '.a-size-mini',
                    'a[data-cy="title-recipe-link"]',
                    'a[href*="/dp/"] span',
                    'span[data-cy="title-recipe-collection"]',
                    'a[href*="/dp/"]',
                    'span.a-size-base-plus',
                    'span.a-size-mini'
                ]

                for selector in title_selectors:
                    title_elem = product.select_one(selector)
                    if title_elem:
                        title = title_elem.get_text(strip=True)
                        if title and len(title) > 5:
                            break

                if not title:
                    logger.debug(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {i}")
                    continue

                # –£–ë–ò–†–ê–ï–ú –§–ò–õ–¨–¢–† –†–ï–õ–ï–í–ê–ù–¢–ù–û–°–¢–ò - –í–û–ó–í–†–ê–©–ê–ï–ú –í–°–ï –¢–û–í–ê–†–´
                relevance_score = matches_query(title, query)  # –¢–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ relevance_score –≤—Å–µ–≥–¥–∞ —á–∏—Å–ª–æ
                if relevance_score is None:
                    relevance_score = 0
                else:
                    relevance_score = float(relevance_score)

                # –¶–µ–Ω–∞ - —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
                price = "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                price_selectors = [
                    '.a-price .a-offscreen',
                    '.a-price-whole',
                    '.a-price .a-price-whole',
                    'span[data-a-color="price"]',
                    '.a-price-range',
                    'span.a-price',
                    'span.a-offscreen'
                ]

                for price_selector in price_selectors:
                    price_elem = product.select_one(price_selector)
                    if price_elem:
                        price_text = price_elem.get_text(strip=True)
                        if price_text and any(char.isdigit() for char in price_text):
                            price = price_text
                            break

                # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image = ""
                img_selectors = [
                    'img[data-image-latency="s-product-image"]',
                    'img[src*="images/I"]',
                    'img[data-old-hires]',
                    'img[src*="amazon"]',
                    'img.s-image'
                    ]

                for img_selector in img_selectors:
                    img_elem = product.select_one(img_selector)
                    if img_elem:
                        image = img_elem.get('src') or img_elem.get('data-src') or img_elem.get('data-old-hires')
                        if image:
                                break

                # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
                link = ""
                link_selectors = [
                    'h2 a[href*="/dp/"]',
                    'h2 a[href*="/gp/product/"]',
                    'a[href*="/dp/"]',
                    'a[href*="/gp/product/"]',
                    'a[data-cy="title-recipe-link"]',
                    'h2 a',
                    'a[data-asin]',
                    'a[href*="amazon.de/dp/"]',
                    'a[href*="amazon.de/gp/product/"]'
                ]

                for link_selector in link_selectors:
                    link_elem = product.select_one(link_selector)
                    if link_elem:
                        link = link_elem.get('href')
                        if link:
                            # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –æ—Ç –ª–∏—à–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                            if '/dp/' in link:
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º ASIN –∏–∑ —Å—Å—ã–ª–∫–∏
                                asin_start = link.find('/dp/') + 4
                                asin_end = link.find('/', asin_start)
                                if asin_end == -1:
                                    asin_end = link.find('?', asin_start)
                                if asin_end == -1:
                                    asin_end = len(link)
                                
                                asin = link[asin_start:asin_end]
                                if len(asin) >= 10:  # ASIN –æ–±—ã—á–Ω–æ 10 —Å–∏–º–≤–æ–ª–æ–≤
                                    link = f"https://www.amazon.de/dp/{asin}"
                                    break
                            elif '/gp/product/' in link:
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º product ID
                                product_start = link.find('/gp/product/') + 12
                                product_end = link.find('/', product_start)
                                if product_end == -1:
                                    product_end = link.find('?', product_start)
                                if product_end == -1:
                                    product_end = len(link)
                                
                                product_id = link[product_start:product_end]
                                if len(product_id) >= 10:
                                    link = f"https://www.amazon.de/gp/product/{product_id}"
                                    break
                            else:
                                # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç /dp/ –∏–ª–∏ /gp/product/, –Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç amazon.de
                                if 'amazon.de' in link:
                                    if not link.startswith('http'):
                                        link = f"https://www.amazon.de{link}"
                                    break

                # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ ASIN –≤ data-asin –∞—Ç—Ä–∏–±—É—Ç–µ
                if not link:
                    asin = product.get('data-asin')
                    if asin and len(asin) >= 10:
                        link = f"https://www.amazon.de/dp/{asin}"
                        logger.debug(f"üîó –°–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –∏–∑ ASIN: {link}")

                # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –≤—Å–µ –µ—â–µ –ø—É—Å—Ç–∞—è, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—É—é —Å—Å—ã–ª–∫—É –≤ —Ç–æ–≤–∞—Ä–µ
                if not link:
                    all_links = product.find_all('a', href=True)
                    for a_tag in all_links:
                        href = a_tag.get('href', '')
                        if '/dp/' in href or '/gp/product/' in href:
                            if not href.startswith('http'):
                                href = f"https://www.amazon.de{href}"
                            link = href
                            break

                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –í–°–ï –¢–û–í–ê–†–´ –ë–ï–ó –§–ò–õ–¨–¢–†–ê
                result = {
                    'name': title,
                    'price': price,
                    'image': image,
                    'url': link,
                    'relevance_score': relevance_score,
                    'source': 'Amazon'
                }

                # –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï —Ç–æ–≤–∞—Ä—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                results.append(result)
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: {title[:50]}... (score: {relevance_score})")

                # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if not link or link.strip() == '':
                    logger.warning(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä –±–µ–∑ —Å—Å—ã–ª–∫–∏: {title[:50]}...")
                else:
                    logger.debug(f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: {link[:50]}...")

            except Exception as e:
                logger.error(f"Error processing product {i}: {e}")
                continue
    
        logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Amazon (–í–°–ï –ù–ê–ô–î–ï–ù–ù–´–ï)")
        return results

    except Exception as e:
        logger.error(f"Error searching Amazon: {e}")
    return results
